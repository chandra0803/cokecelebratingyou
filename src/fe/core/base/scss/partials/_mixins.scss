// GIVE ACCESS TO THE BOOTSTRAP MIXINS IF NEEDED
@import "bootstrap/mixins";

// calculate the width of the homeApp container depending on the number of available columns to show
@function homeAppContainer($cols) {
    @return $cols * $g5ModuleUnit - $g5ModuleGutter * 2;
}


@mixin centerer($horizontal: true, $vertical: true) {
  position: absolute;
  @if ($horizontal and $vertical) {
    top: 50%;
    left: 50%;
    @include transform(translate(-50%, -50%));
  } @else if ($horizontal) {
    left: 50%;
    @include transform(translate(-50%, 0));
  } @else if ($vertical) {
    top: 50%;
    @include transform(translate(0, -50%));
  }
}

@mixin vertical-align($position: relative) {
  position: $position;
  top: 50%;
  -webkit-transform: translateY(-50%);
  -ms-transform: translateY(-50%);
  transform: translateY(-50%);
}
@mixin remove-vertical-align($position: initial) {
  position: $position;
  top: auto;
  top: initial;
  -webkit-transform:none;
  -ms-transform: none;
  transform: none;
}
// for the module liner to calculate the sizes
@mixin module_moduleLiner(
    $cols,
    $rows,
    $borderWidth: 0
) {
    width : initial;//($g5ModuleUnit * $cols) - (2 * $g5ModuleGutter) - (2 * $borderWidth);
    @if($rows){
        height : ($g5ModuleUnit * $rows) - (2 * $g5ModuleGutter) - (2 * $borderWidth);
    }
}

// module liner backgrounds
@mixin module_moduleLinerBackground(
    $bgColor: $g5ModuleBgColor,
    $gradType: $g5ModuleGradType,
    $gradMeta: $g5ModuleGradMeta,
    $gradStops: $g5ModuleGradStops,
    $force: false
) {
    // check to see if any of the arguments have been passed values that are non-default OR if we're forcing this to run.
    // because _allModules.scss sets the properties of every module to the global values, we don't need to run this mixin on a per-app basis unless it introduces custom values. Saves on code.
    @if $bgColor != $g5ModuleBgColor or $gradType != $g5ModuleGradType or $gradMeta != $g5ModuleGradMeta or $gradStops != $g5ModuleGradStops or $force == true {

        // enables SVG gradient support in Opera and IE9
        $experimental-support-for-svg: true;

        // check to see if $gradStops is supposed to be the default calculated list of values (passed value of false)
        @if $gradStops == false {
            $gradStops: (lighten($bgColor, 17%), $bgColor)
        }

        // check to see if we've turned off the gradient altogether
        @if $gradType == none or $gradType == false {
            @include background($bgColor);
        }
        // check to see if the gradient type has been switched from the default linear to radial
        @elseif $gradType == radial {
            // check to see if the gradient meta information is still the default linear-specific "top" value and hasn't been overridden
            // note, there are other linear-specific values that can get past this check. This is simply for the defaults
            @if $gradMeta == to bottom {
                // switch it to the default radial-specific "center center, circle" value
                $gradMeta: center center, circle;
            }
            @include background($bgColor radial-gradient($gradMeta, $gradStops));
        }
        // otherwise, assume default linear style
        @else {
            @include background($bgColor linear-gradient($gradMeta, $gradStops));
        }

        // IE8 and down
        .lt-ie9 & {
            $start: nth($gradStops, 1);
            $finish: nth($gradStops, length($gradStops));
            @if length($start) > 1 {
                $start: nth($start, 1);
            }
            @if length($finish) > 1 {
                $finish: nth($finish, 1);
            }
            filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{ie-hex-str( $start )}', endColorstr='#{ie-hex-str( $finish )}', GradientType=0);
        }

    } // end @if
}

// exposes the module title-icon-view icon/text colors and text font family on a per-app basis
@mixin module_titleIconView(
    $iconColor: $g5ModuleIconColor,
    $titleColor: $g5ModuleTitleColor,
    $titleFontFamily: $g5ModuleTitleFontFamily,
    $titleFontStyle: $g5ModuleTitleFontStyle,
    $titleTextTransform: $g5ModuleTitleTextTransform,
    $force: false
) {
    // check to see if any of the arguments have been passed values that are non-default OR if we're forcing this to run.
    // because _allModules.scss sets the properties of every module to the global values, we don't need to run this mixin on a per-app basis unless it introduces custom values. Saves on code.
    @if $force == true or $iconColor != $g5ModuleIconColor or $titleColor != $g5ModuleTitleColor or $titleFontFamily != $g5ModuleTitleFontFamily or $titleFontStyle != $g5ModuleTitleFontStyle or $titleTextTransform != $g5ModuleTitleTextTransform {

        @if $iconColor != $g5ModuleIconColor or $force == true {
            color: $iconColor;
        }

        h3 {
            @if $titleFontFamily != $g5ModuleTitleFontFamily or $force == true {
                font-family: $titleFontFamily;
            }
            @if $titleFontStyle and ($titleFontStyle != $g5ModuleTitleFontStyle or $force == true) {
                font-style: $titleFontStyle;
            }
            @if $titleTextTransform and ($titleTextTransform != $g5ModuleTitleTextTransform or $force == true) {
                text-transform: $titleTextTransform;
            }
            @if $titleColor != $iconColor and ($titleColor != $g5ModuleTitleColor or $force == true) {
                color: $titleColor;
            }
        }
    } // end @if
}


// for outputting the g5 fonticons on modules at specific sizes
@mixin module_titleIconViewFonticonsSizes(
    // $size of 1, 2, 4 are fully supported by images.
    // Other sizes will not produce a background image for browsers that do not support background-size (see @mixin g5fonticons_image() for those conditions)
    $size: 1,
    $iconString: false,
    $imageString: false,
    $imageOnly: false, // pass true if you only want to output images
    $force: false // pass true if you want to output an image icon regardless of the $g5fonticonsModulesMode value
) {
    $selector: '[class^="icon-g5-"], [class*=" icon-g5-"]';
    @if $iconString {
        $selector: '.icon-g5-'+$iconString;
    }

    $baseUnit: 108px;

    @if $imageOnly == false {
        #{$selector} {
            @if $size == 1 {
                font-size: 96px; // magic number // (roughly 88.9% of $baseUnit)
                .lt-ie8 & { text-indent: 13px; } // magic number // (roughly 13.5% of font-size)
            }
            // @else if $size == 2 {
            //     font-size: 172px; // magic number // (roughly 79.6% of $baseUnit*2)
            //     .lt-ie8 & { text-indent: 34px; } // magic number // (roughly 19.8% of font-size)
            // }
            // @else if $size == 4 {
            //     font-size: 348px; // magic number // (roughly 80.5% of $baseUnit*4)
            //     .lt-ie8 & { text-indent: 67px; } // magic number // (roughly 19.3% of font-size)
            // }
            @else {
                font-size: $baseUnit * $size * .8; // (80% of $baseUnit*$size)
                .lt-ie8 & { text-indent: $baseUnit * $size * .8 * .2; } // (20% of font-size)
            }
            line-height: $baseUnit * $size;
            width: $baseUnit * $size;
            height: $baseUnit * $size;
            margin: (-1 * $baseUnit * $size / 2) 0 0 (-1 * $baseUnit * $size / 2);
        }
    }

    @if $imageString {
        @if $g5fonticonsModulesMode == 'image' or $force == true {
            @include g5fonticons(
                $list: $imageString,
                $image: true,
                $single: true,
                $imageScale: $size+'x'
            );
            @media only screen and (-webkit-min-device-pixel-ratio: 2),
                   only screen and (min-resolution: 192dpi) {
                $imageScale: '';
                @if $size == 1 or $size == 2 or $size == 4 {
                    $imageScale: ($size * 2) + 'x';
                }
                @else {
                    $imageScale: $size + 'x';
                }

                @include g5fonticons(
                    $list: $imageString,
                    $image: true,
                    $single: true,
                    $imageScale: $imageScale
                );
            }
        }
    }
}


// convert the visitAppBtn in the upper-right of modules from a small clickable area to a full module clickable area
@mixin module_visitAppBtnFullModule(
    $iconVisible: true
) {
    .visitAppBtn{
        top: 0;
        right: 0;
        width: 100%;
        height: 100%;

        .icon-arrow-1-right {
            @if $iconVisible == false {
                display: none;
            }
            @else {
                float: right;
                margin-right: $g5ModuleVisitAppButtonOffset;
                margin-top: $g5ModuleVisitAppButtonOffset;
            }
        }
    }
    .wide-view {
        cursor: pointer;
    }
}

// used to display a faded-out version of the module when data is loading
@mixin module_fadeOnDataLoading(
    $className: 'dataLoading',
    $classesToHide: '.wide-view',
    $classesToShow: '.title-icon-view',
    $opacity: 0.25
) {
    &.#{$className} {
        #{$classesToHide} {
            display: none;
        }
        #{$classesToShow} {
            display: block;

            h3,
            [class^="icon-g5-"],
            [class*=" icon-g5-"] {
                @include opacity($opacity);
            }
        }
    }
}

// used to color the cycle dots on a per-module basis
@mixin module_cycleDots(
    $cycleDotWidth: 8px,
    $cycleDotBkg: transparent,
    $cycleDotBorder: 1px solid $white,
    $cycleDotBkgHover: transparentize($white, .5),
    $cycleDotBorderHover: 1px solid $white,
    $cycleDotBkgActive: $white,
    $cycleDotBorderActive: 1px solid $white,
    $cycleDotBorderRadius: $cycleDotWidth
) {
    @if $cycleDotWidth or $cycleDotBkg or $cycleDotBorder or $cycleDotBkgHover or $cycleDotBorderHover or $cycleDotBkgActive or $cycleDotBorderActive or $cycleDotBorderRadius {
        .cycleLegend {
            @if $cycleDotWidth {
                margin-left: $cycleDotWidth / 4;

                .lt-ie8 & {
                    bottom: $cycleDotWidth / 2;
                }
            }

            .cycleDot {
                @if $cycleDotWidth {
                    margin: ($cycleDotWidth / 2) ($cycleDotWidth) 0 ($cycleDotWidth / -2);
                    width: $cycleDotWidth;
                    height: $cycleDotWidth;
                }
                @if $cycleDotBkg {
                    @include safeBkgs($cycleDotBkg);
                }
                @if $cycleDotBorder {
                    border: $cycleDotBorder;
                }
                @if $cycleDotBorderRadius {
                    @include borderRadiusSlim($cycleDotBorderRadius);
                }

                @if $cycleDotBkgHover or $cycleDotBorderHover {
                    &:hover {
                        @if $cycleDotBkgHover {
                            @include safeBkgs($cycleDotBkgHover);
                        }
                        @if $cycleDotBorderHover {
                            border: $cycleDotBorderHover;
                        }
                    }
                }

                @if $cycleDotBkgActive or $cycleDotBorderActive {
                    &.selected,
                    &.selected:hover {
                        @if $cycleDotBkgActive {
                            @include safeBkgs($cycleDotBkgActive);
                        }
                        @if $cycleDotBorderActive {
                            border: $cycleDotBorderActive;
                        }
                    }
                }
            }
        }
    } // /@if
}

// used for coloring/styling container-splitter wells
@mixin page_containerSplitterDisplay(
    $h2Color                : false,
    $textColor              : false,
    $linkColor              : false,
    $linkHoverColor         : false,
    $linkIconColor          : false,
    $linkIconHoverColor     : false,
    $bgColor                : false,
    $bgGradType             : false,
    $bgGradMeta             : false,
    $bgGradStops            : false,
    $borderTopBottomWidth   : false,
    $borderTopBottomColor   : false,
    $boxShadow              : false
) {
    @if $textColor {
        color: $textColor;
    }
    @if $bgColor {
        @if $bgGradType {
            @include module_moduleLinerBackground(
                $bgColor: $bgColor,
                $gradType: $bgGradType,
                $gradMeta: $bgGradMeta,
                $gradStops: $bgGradStops
            );
        }
        @else {
            background: $bgColor;
        }
    }
    @include border-radius(0);
    @if $borderTopBottomWidth and $borderTopBottomWidth != 0 {
        border: $borderTopBottomWidth solid $borderTopBottomColor;
        border-left: 0;
        border-right: 0;
    }
    @else {
        border: 0;
    }
    @if $boxShadow {
        @include box-shadow($boxShadow);
    }
    @include fontSmoothing($textColor, $bgColor);

    @if $h2Color {
        h2 {
            color: $h2Color;
        }
    }

    a {
        @if $linkColor {
            color: $linkColor;
        }

        i {
            @if $linkIconColor {
                color: $linkIconColor;
                border-color: $linkIconColor;
            }
        }

        &:hover {
            @if $linkHoverColor {
                color: $linkHoverColor;
            }
            @if $linkIconHoverColor {
                i {
                    color: $linkIconHoverColor;
                    border-color: $linkIconHoverColor;
                }
            }
        }
    }
}


//hack the gridCore methods of bootstrap for page content
// @mixin gridCoreG5($columnWidth, $gutterWidth, $paddingHoriz) {
//     .row {
//         margin-left: ($gutterWidth * -1) + $paddingHoriz - $g5PageContentLeftRightBorderWidth;
//         @include clearfix();
//         //make sure nested rows have no effective margin
//         .row {
//             margin-left: ($gutterWidth * -1);
//         }
//     }

//     [class*="span"] {
//         float: left;
//         margin-left: $gutterWidth;
//     }

//     @include gridCoreSpanXg5($gridColumns, $columnWidth, $gutterWidth, $paddingHoriz);
//     @include gridCoreOffsetXg5($gridColumns, $columnWidth, $gutterWidth, $paddingHoriz);
// }

// @mixin gridCoreSpanXg5($cols, $columnWidth, $gutterWidth, $contPadding) {
//     @for $i from 1 through $cols {
//         .span#{$i} { @include gridCoreSpanG5($i, $columnWidth, $gutterWidth, $contPadding, $cols) };
//     }
// }

// @mixin gridCoreSpanG5($columns, $columnWidth, $gutterWidth, $contPadding, $numCols) {
//     width: ($columnWidth * $columns) + ($gutterWidth * ($columns - 1)) - ($contPadding * 2 * ( $columns / $numCols)) ;
// }

// @mixin gridCoreOffsetXg5($cols, $columnWidth, $gutterWidth, $contPadding) {
//     @for $i from 1 through $cols {
//         .offset#{$i} { @include gridCoreOffsetG5($i, $columnWidth, $gutterWidth, $contPadding, $cols); };
//     }
// }

// @mixin gridCoreOffsetG5($columns, $columnWidth, $gutterWidth, $contPadding, $numCols) {
//     margin-left: ($columnWidth * $columns) + ($gutterWidth * ($columns + 1)) - ($contPadding * 2 * ( $columns / $numCols)) ;
// }

// @mixin gridCoreSpanMobile($cols) {
//     @for $i from 1 through $cols {
//         .span#{$i} { width: 100%; };
//     }
// }
//eof gridCore hack

@mixin gridCoreInnerFullSplit($leftRightPad, $topBotPad: null, $leftRightBorder: 0, $topBotBorder: 0) {
    @include gridCoreInnerNegMargin($leftRightPad, $topBotPad);
    @include gridCoreInnerPadding($leftRightPad, $topBotPad);
}

@mixin gridCoreInnerNegMargin($leftRightPad, $topBotPad: null, $leftRightBorder: 0, $topBotBorder: 0) {
    @if $leftRightPad != null {
        margin-left: (-1 * $leftRightPad);
        margin-right: (-1 * $leftRightPad);
    }
    @if $topBotPad != null {
        margin-top: (-1 * $topBotPad);
        margin-bottom: (-1 * $topBotPad);
    }
}
@mixin gridCoreInnerPadding($leftRightPad, $topBotPad: null, $leftRightBorder: 0, $topBotBorder: 0) {
    @if $leftRightPad != null {
        padding-left: $leftRightPad;
        padding-right: $leftRightPad;
    }
    @if $topBotPad != null {
        padding-top: $topBotPad;
        padding-bottom: $topBotPad;
    }
}

@mixin mobileBtn($width) {
    display: block;
    width: $width;
    padding-left: 0;
    padding-right: 0;
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
}

// $circledAwesomeIcon[prop] variables are defined in _variables.scss
/*
@mixin circledAwesomeIcon(
    $fontSize:      $circledAwesomeIconFontSize,
    $lineHeight:    false,
    $color:         $circledAwesomeIconColor,
    $borderColor:   $circledAwesomeIconBorderColor,
    $circleWidth:   $circledAwesomeIconCircleWidth,
    $borderWidth:   $circledAwesomeIconBorderWidth,
    $bgColor:       $circledAwesomeIconBgColor
) {

    // check to see if $gradStops is supposed to be the default calculated list of values (passed value of false)
    @if $lineHeight == false {
        $lineHeight: $fontSize * 1.42
    }

    width: $circleWidth + (2 * $borderWidth);
    height: $circleWidth + (2 * $borderWidth);
    font-size: $fontSize;
    line-height: $lineHeight;
    text-align: center;
    color: $color;

    .lt-ie8 & {
        width: $circleWidth;
        height: $circleWidth;
    }

    &::before {
        margin: 0;
        width: $circleWidth;
        height: $circleWidth;
        background: $bgColor;
        border: $borderWidth solid transparentize($borderColor,.01);
        border-radius: $circleWidth + ($borderWidth * 2);
    }
}
@mixin circledAwesomeIconRecolored(
    $color: false,
    $borderColor: false,
    $bgColor: false
) {
    @if $color {
        color: $color;
    }

    &::before {
        @if $bgColor {
            background: $bgColor;
        }
        @if $borderColor {
            border-color: transparentize($borderColor,.01);
        }
    }
}
*/

// NOTE: icon-g5-drawtool sits on the baseline. The default measurement is calibrated for that icon at a 108px font-size (1x1 default size)
@mixin g5HomeAppIconBoxReflect($adjust: -31px) {
    // turning these off. Android browsers can't render them properly
    // -webkit-box-reflect: below $adjust -webkit-gradient(linear, left top, left bottom, from(transparent), color-stop(0.5, transparent), to(rgba(255,255,255,.5)));
}

// used for instances when good browsers and bad browsers (old IE) need two separate background color techniques
// this will attempt to create a transparent background using the filter property for IE when necessary
// the filter can be suppressed with $filter: false if it causes problems
@mixin safeBkgs(
    $bgColor,
    $property: background,
    $filter: true
) {
    #{$property} : $bgColor;
    @if $filter and $bgColor and $bgColor != 'transparent' and $bgColor != 'none' and alpha($bgColor) != 1 {
        .lt-ie9 & {
            background: image-url('ieCleaPicFix.png');
            filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{ie-hex-str( $bgColor )}', endColorstr='#{ie-hex-str( $bgColor )}', GradientType=0);
            zoom: 1;
        }
    }
}

// used for only including border radius if the property is explicit
// in practice, if the radius is being set for the first time, any value greater than 0 will output border-radius code while a value of 0 won't output anything (slimming down the CSS)
// however, when a radius has already been set and it needs to be overridden back to 0, the $override flag needs to be set to true
@mixin borderRadiusSlim(
    $radius,
    $override: false // set to true to allow a radius of 0 to override the logic test
) {
    @if $radius and $radius != 0 or $override == true {
        @include border-radius($radius);
    }
}

// used to swap between skin images and core images
// if an explicit $imgUrlPath is passed in, the property will use that path
// if no $imgUrlPath is passed in, the property will assume the skin images folder
// therefore, if a skin needs to use images from the core images directory, it should pass an explicit $imgUrlPath
// $imgUrl can be a list of images in the same directory if you need multiple backgrounds
@mixin safeImgUrls(
    $imgUrl,
    $imgUrlPath,
    $property: background
) {
    $new: '';

    @if( $imgUrl ) {
        @each $img in $imgUrl {
            @if $new != '' {
                $new : #{$new + ', '};
            }

            @if( $imgUrlPath and $imgUrlPath != 'img/' ) {
                $new : #{$new + url($imgUrlPath + $img)};
            } @else {
                $new : #{$new + url('../img/' + $img)};
            }
        }

        #{$property} : $new;
    }
}
// just get the url back
@function safeImgUrl(
    $imgUrl,
    $imgUrlPath
) {


    @if( $imgUrlPath and $imgUrlPath != 'img/' ) {
        @return $imgUrlPath + $imgUrl;
    } @else {
        @return  '../img/' + $imgUrl;
    }


}

// used to include the -webkit-font-smoothing: antialiased; when light text is on a dark background
@mixin fontSmoothing($textColor, $bgColor) {
    @if $textColor and $bgColor and lightness($textColor) > lightness($bgColor) {
        -webkit-font-smoothing: antialiased; // makes light-on-dark text look a bit better
    }
    @else {
        -webkit-font-smoothing: inherit; // dark-on-light text we leave up to the browser
    }
}

// helpful for overriding progress bar styles
// doesn't include any classes, so this is really just a gradient generator
@mixin progressBarHelper(
    $bgColor,
    $gradMeta: top, // pass false to do a solid color background
    $gradStops: false
) {
    @if $gradMeta {
        // enables SVG gradient support in Opera and IE9
        $experimental-support-for-svg: true;

        // check to see if $gradStops is supposed to be the default calculated list of values (passed value of false)
        @if $gradStops == false {
            $gradStops: ($bgColor, darken($bgColor, 15%))
        }

        @include background($bgColor linear-gradient($gradMeta, $gradStops));
        // IE8 and down
        .lt-ie9 & {
            filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{ie-hex-str( nth($gradStops, 1) )}', endColorstr='#{ie-hex-str( nth($gradStops, length($gradStops)) )}', GradientType=0);
        }
    }
    @else {
        background: $bgColor;
    }
}

// for creating entirely new progress bar styles
// default values for each parameter were taken from bootstrap/_progress-bars (except the bar color using the $linkColor variable. That's a G5 thing)
@mixin progressBarHelperFull(
    $wellClass: '.progress',
    // progress well
    $bgColor: $grayLight,
    $gradMeta: top, // no *GradType on this one. Always linear, but it can be right/left or top/bottom. A false value will cancel the gradient altogether
    $gradStops: false,
    $borderRadius: $baseBorderRadius,
    $boxShadow: inset 0 1px 2px rgba(0,0,0,.1),
    // progress bar
    $barTextColor: $white,
    $barTextShadow: 0 -1px 0 rgba(0,0,0,.25),
    $barBgColor: $linkColor,
    $barGradMeta: top, // no *GradType on this one. Always linear, but it can be right/left or top/bottom. A false value will cancel the gradient altogether
    $barGradStops: false,
    $barBoxShadow: inset 0 -1px 0 rgba(0,0,0,.15)
) {
    @if $gradMeta {
        // enables SVG gradient support in Opera and IE9
        $experimental-support-for-svg: true;

        // check to see if $gradStops is supposed to be the default calculated list of values (passed value of false)
        @if $gradStops == false {
            $gradStops: ($bgColor, darken($bgColor, 15%))
        }
    }
    @if $barGradMeta {
        // enables SVG gradient support in Opera and IE9
        $experimental-support-for-svg: true;

        // check to see if $barGradStops is supposed to be the default calculated list of values (passed value of false)
        @if $barGradStops == false {
            $barGradStops: ($barBgColor, darken($barBgColor, 15%))
        }
    }

    #{$wellClass} {
        @if $bgColor {
            @if $gradMeta {
                @include background($bgColor linear-gradient($gradMeta, $gradStops));
            }
            @else {
                background: $bgColor;
            }
        }
        @if $boxShadow {
            @include box-shadow($boxShadow);
        }
        @if $borderRadius {
            @include border-radius($borderRadius);
        }
    }

    // Bar of progress
    #{$wellClass} .bar {
        @if $barTextColor {
            color: $barTextColor;
        }
        @if $barTextShadow {
            text-shadow: $barTextShadow;
        }
        @if $barBgColor {
            @if $barGradMeta {
                @include background($barBgColor linear-gradient($barGradMeta, $barGradStops));
            }
            @else {
                background: $barBgColor;
            }
        }
        @if $barBoxShadow {
            @include box-shadow($barBoxShadow);
        }
    }
}

// avatarInitialSize
// calculate the fontsize based on container height of avatar * line height should match
@function avatarInitialSize($height) {
    @if $height < 41{
        @return $height/2.5;
    }@else{
        @return $height/4;
    }

}

@mixin avatarSizing($size: $card_avatarSize_default) {
    .avatarwrap {
        height: $size;
        width: $size;
        .avatar-initials {
            @if $size < 50{
                font-size: avatarInitialSize($size * 1.5);
            }@else{
               font-size: avatarInitialSize($size);
            }
            line-height: $size;
        }
    }

} // /@mixin cardAvatarSizing

@mixin avatarSizingNoWrap($size: $card_avatarSize_default) {
        height: $size;
        width: $size;
        .avatar-initials {
            @if $size < 50{
                font-size: avatarInitialSize($size * 1.5);
            }@else{
               font-size: avatarInitialSize($size);
            }

            line-height: $size;
        }


} // /@mixin cardAvatarSizing



// for generating the CSS necessary for G5 Fonticons
@mixin g5fonticons(
    $list,
    $ie7: false,
    $image: false,
    $single: false,
    $imageScale: false
) {
    @if $single {
        @if $image {
            @include g5fonticons_image( nth($list,1), $imageScale );
        }
        @else {
            @if $ie7 {
                @include g5fonticons_font( nth($list,1), nth($list,3), $ie7: true );
            }
            @else {
                @include g5fonticons_font( nth($list,1), nth($list,2) );
            }
        }
    }
    @else {
        @each $icon in $list {
            @if $image {
                @include g5fonticons_image( nth($icon,1), $imageScale );
            }
            @else {
                @if $ie7 {
                    @include g5fonticons_font( nth($icon,1), nth($icon,3), $ie7: true );
                }
                @else {
                    @include g5fonticons_font( nth($icon,1), nth($icon,2) );
                }
            }
        }
    }
}
// g5fonticons helpers
@mixin g5fonticons_font(
    $identifier: '',
    $unicode: '',
    $ie7: false
) {
    @if $ie7 {
        .icon-g5-#{$identifier} { *zoom: expression( this.runtimeStyle['zoom'] = '1', this.innerHTML = '&#x#{$unicode};&nbsp;'); }
    }
    @else {
        .icon-g5-#{$identifier}:before { content: "#{$unicode}"; }
    }
}
@mixin g5fonticons_image(
    $identifier: '',
    $scale: false
) {
    @if $scale and ($scale == '2x' or $scale == '4x' or $scale == '8x') {
        .icon-g5-#{$identifier} {
            background-image: image-url('icon-g5-#{$identifier}-#{$scale}.png');
        }
    }
    @else {
        @if $scale and $scale != '1x' {
            .icon-g5-#{$identifier} {
                background-image: image-url('icon-g5-#{$identifier}.png');
                background-size: 100%;
            }
            .no-backgroundsize & .icon-g5-#{$identifier} {
                background-image: none;
            }
        }
        @else {
            .icon-g5-#{$identifier} {
                background-image: image-url('icon-g5-#{$identifier}.png');
            }
        }
    }
}
@function g5fonticons_getSelectorsFromList($list) {
    $selectors: '';
    // check to see if our $list is longer than 1 item and the second item in the list has no length (meaning it's a string)
    // if this is true, our $list has only a single font item in it
    @if length($list) > 1 and length(nth($list,2)) < 2 {
        $selectors: '.icon-g5-' + nth($list, 1);
    }
    @else {
        @each $font in $list {
            @if nth($list, 1) == $font {
                $selectors: '.icon-g5-' + nth($font, 1);
            }
            @else {
                $selectors: $selectors + ', .icon-g5-' + nth($font, 1);
            }
        }
    }
    @return $selectors;
}
@mixin linear-gradient($direction, $color-stops...) {
  @if is-direction($direction) == false {
    $color-stops: $direction, $color-stops;
    $direction: 180deg;
  }
  background: nth(nth($color-stops, 1), 1);
  background: -webkit-linear-gradient(legacy-direction($direction), $color-stops);
  background: linear-gradient($direction, $color-stops);
}
@mixin transition($transition...) {
    -moz-transition:    $transition;
    -o-transition:      $transition;
    -webkit-transition: $transition;
    transition:         $transition;
}


 // $max-height - max-height property value. required
// parameter to limit text in non-webkit browser.
// Be careful with overriding properties.
// Strongly recommended to include this mixin after all properties
// to prevent overriding of display property:
// .my block {
//   display: block;
//   ...
//   @include ellipsis(2em, 2);
// }
// Example of usage:
// @include ellipsis(2em, 2);
@mixin ellipsis ($max-height, $lines: 2) {
  // Fallback for non-webkit browsers.
  // Fallback does not render ellipsis.
  overflow: hidden;
  max-height: $max-height;

  // Webkit solution for multiline ellipsis
  display: -webkit-box;
  -webkit-box-orient: vertical;
  -webkit-line-clamp: $lines;

  // Solution for Opera
  text-overflow: -o-ellipsis-lastline;
}

/**
 *  @mixin applyGlobalLinkStyles()
 *
 *  this mixin will apply the global link styles (or an optional subset thereof)
 *  use it anywhere you want to apply the global styles, but don't want to have to manually keep them in sync
 *  note that it will only apply those properties that have a definition in _variables.scss
 *
 *  by default, all defined properties are applied. Pass false to any property to be excluded
 */
@mixin applyGlobalLinkStyles(
    $color: true,
    $fontWeight: true,
    $fontStyle: true,
    $textDecoration: true,
    $textTransform: true,
    $bgColor: true,
    $border: true
)
{
    @if $color          and $linkColor != $textColor {
        /* color via applyGlobalLinkStyles() */
        color: $linkColor;
    }
    @if $fontWeight      and $linkFontWeight != $fontWeightNormal {
        /* font-weight via applyGlobalLinkStyles() */
        font-weight: $linkFontWeight;
    }
    @if $fontStyle      and $linkFontStyle != none {
        /* font-style via applyGlobalLinkStyles() */
        font-style: $linkFontStyle;
    }
    @if $textDecoration and $linkTextDecoration != none {
        /* text-decoration via applyGlobalLinkStyles() */
        text-decoration: $linkTextDecoration;
    }
    @if $textTransform  and $linkTextTransform != none {
        /* text-transform via applyGlobalLinkStyles() */
        text-transform: $linkTextTransform;
    }
    @if $bgColor        and $linkBgColor != transparent {
        /* background-color via applyGlobalLinkStyles() */
        background-color: $linkBgColor;
    }
    @if $border         and $linkBorder {
        /* border-bottom: via applyGlobalLinkStyles() */
        border-bottom: $linkBorder;
    }

    &:hover,
    &:focus {
        @if $fontWeight     and $linkColorHover {
            /* color via applyGlobalLinkStyles() */
            color: $linkColorHover;
        }
        @if $fontStyle      and $linkFontStyleHover {
            /* font-style via applyGlobalLinkStyles() */
            font-style: $linkFontStyleHover;
        }
        @if $textDecoration and $linkTextDecorationHover {
            /* text-decoration via applyGlobalLinkStyles() */
            text-decoration: $linkTextDecorationHover;
        }
        @if $textTransform  and $linkTextTransformHover {
            /* text-transform via applyGlobalLinkStyles() */
            text-transform: $linkTextTransformHover;
        }
        @if $bgColor        and $linkBgColorHover {
            /* background-color via applyGlobalLinkStyles() */
            background-color: $linkBgColorHover;
        }
        @if $border         and $linkBorderHover {
            /* border-bottom: via applyGlobalLinkStyles() */
            border-bottom: $linkBorderHover;
        }
    }
}

/**
 *  @mixin unapplyGlobalLinkStyles()
 *  (a.k.a. "ignoreGlobalLinkStyles()")
 *
 *  this mixin will override the global link styles (or an optional subset thereof)
 *  use it anywhere you want to undo the global styles, but don't want to have to manually keep them in sync
 *  note that it will only override those properties that have a definition in _variables.scss
 *
 *  by default, all defined properties are overridden. Pass false to any property to be excluded
 *
 *  note: font and text properties are set to inherit from the parent while background and border are set to disappear
 *  note: if you want to apply a specific style TO BOTH :link and :hover instead of inheriting (or disappearing), you can pass that value
 *  note: if you want to apply a different style TO EACH OF :link and :hover, pass two values space-separated
 */
@mixin unapplyGlobalLinkStyles(
    $color: inherit,
    $fontWeight: inherit,
    $fontStyle: inherit,
    $textDecoration: inherit,
    $textTransform: inherit,
    $bgColor: transparent,
    $border: none
)
{
    @if $color          and $linkColor != $textColor {
        @if nth($color, 1) {
            /* color via unapplyGlobalLinkStyles() */
            color: nth($color, 1);
        }
    }
    @if $fontWeight      and $linkFontWeight != $fontWeightNormal {
        @if nth($fontWeight, 1) {
            /* font-weight via unapplyGlobalLinkStyles() */
            font-weight: nth($fontWeight, 1);
        }
    }
    @if $fontStyle      and $linkFontStyle != none {
        @if nth($fontStyle, 1) {
            /* font-style via unapplyGlobalLinkStyles() */
            font-style: nth($fontStyle, 1);
        }
    }
    @if $textDecoration and $linkTextDecoration != none {
        @if nth($textDecoration, 1) {
            /* text-decoration via unapplyGlobalLinkStyles() */
            text-decoration: nth($textDecoration, 1);
        }
    }
    @if $textTransform  and $linkTextTransform != none {
        @if nth($textTransform, 1) {
            /* text-transform via unapplyGlobalLinkStyles() */
            text-transform: nth($textTransform, 1);
        }
    }
    @if $bgColor        and $bgColor != transparent and $linkBgColor != transparent {
        @if nth($bgColor, 1) {
            /* background-color via unapplyGlobalLinkStyles() */
            background-color: nth($bgColor, 1);
        }
    }
    @if $border         and $linkBorder {
        @if nth($border, 1) {
            /* border-bottom: via unapplyGlobalLinkStyles() */
            border-bottom: nth($border, 1);
        }
    }

    &:hover,
    &:focus {
        // first we check to see if the length of the passed value is 2 (and the property is being set globally)
            // then we check to see if the second value is useful (false allows us to ignore this altogether)
            // however, if false and the first value was set, we need to reapply the global style
        // otherwise...
            // we apply the first value (if the property is being set globally)
        @if length($color) == 2 and $linkColorHover {
            @if nth($color, 2) {
                /* color via unapplyGlobalLinkStyles() */
                color: nth($color, 2);
            }
            @else {
                @if nth($color, 1) {
                    /* color via unapplyGlobalLinkStyles() */
                    color: $linkColorHover;
                }
            }
        }
        @else {
            @if $color          and $linkColorHover {
                /* color via unapplyGlobalLinkStyles() */
                color: $color;
            }
        }

        @if length($fontWeight) == 2 and $linkFontWeightHover {
            @if nth($fontWeight, 2) {
                /* font-weight via unapplyGlobalLinkStyles() */
                font-weight: nth($fontWeight, 2);
            }
            @else {
                @if nth($fontWeight, 1) {
                    /* font-weight via unapplyGlobalLinkStyles() */
                    font-weight: $linkFontWeightHover;
                }
            }
        }
        @else {
            @if $fontWeight     and $linkFontWeightHover {
                /* font-weight via unapplyGlobalLinkStyles() */
                font-weight: $fontWeight;
            }
        }

        @if length($fontStyle) == 2 and $linkFontStyleHover {
            @if nth($fontStyle, 2) {
                /* font-style via unapplyGlobalLinkStyles() */
                font-style: nth($fontStyle, 2);
            }
            @else {
                @if nth($fontStyle, 1) {
                    /* font-style via unapplyGlobalLinkStyles() */
                    font-style: $linkFontStyleHover;
                }
            }
        }
        @else {
            @if $fontStyle      and $linkFontStyleHover {
                /* font-style via unapplyGlobalLinkStyles() */
                font-style: $fontStyle;
            }
        }

        @if length($textDecoration) == 2 and $linkTextDecorationHover {
            @if nth($textDecoration, 2) {
                /* text-decoration via unapplyGlobalLinkStyles() */
                text-decoration: nth($textDecoration, 2);
            }
            @else {
                @if nth($textDecoration, 1) {
                    /* text-decoration via unapplyGlobalLinkStyles() */
                    text-decoration: $linkTextDecorationHover;
                }
            }
        }
        @else {
            @if $textDecoration and $linkTextDecorationHover {
                /* text-decoration via unapplyGlobalLinkStyles() */
                text-decoration: $textDecoration;
            }
        }

        @if length($textTransform) == 2 and $linkTextTransformHover {
            @if nth($textTransform, 2) {
                /* text-transform via unapplyGlobalLinkStyles() */
                text-transform: nth($textTransform, 2);
            }
            @else {
                @if nth($textTransform, 1) {
                    /* text-transform via unapplyGlobalLinkStyles() */
                    text-transform: $linkTextTransformHover;
                }
            }
        }
        @else {
            @if $textTransform  and $linkTextTransformHover {
                /* text-transform via unapplyGlobalLinkStyles() */
                text-transform: $textTransform;
            }
        }

        @if length($bgColor) == 2 and $linkBgColorHover {
            @if nth($bgColor, 2) {
                /* background-color via unapplyGlobalLinkStyles() */
                background-color: nth($bgColor, 2);
            }
            @else {
                @if nth($bgColor, 1) {
                    /* background-color via unapplyGlobalLinkStyles() */
                    background-color:$linkBgColorHover ;
                }
            }
        }
        @else {
            @if $bgColor        and $bgColor != transparent and $linkBgColorHover {
                /* background-color via unapplyGlobalLinkStyles() */
                background-color: $bgColor;
            }
        }

        @if length($border) == 2 and $linkBorderHover {
            @if nth($border, 2) {
                /* border-bottom: via unapplyGlobalLinkStyles() */
                border-bottom: nth($border, 2);
            }
            @else {
                @if nth($border, 1) {
                    /* border-bottom: via unapplyGlobalLinkStyles() */
                    border-bottom: $linkBorderHover;
                }
            }
        }
        @else {
            @if $border         and $linkBorderHover {
                /* border-bottom: via unapplyGlobalLinkStyles() */
                border-bottom: $border;
            }
        }

    }
}
/**
 * @mixin ignoreGlobalLinkStyles()
 *
 * proxy for "unapplyGlobalLinkStyles()" with a different name to help with understanding what it does
 * works exactly the same way
 */
@mixin ignoreGlobalLinkStyles(
    $color: inherit,
    $fontWeight: inherit,
    $fontStyle: inherit,
    $textDecoration: inherit,
    $textTransform: inherit,
    $bgColor: transparent,
    $border: none
)
{
    @include unapplyGlobalLinkStyles(
        $color: $color,
        $fontWeight: $fontWeight,
        $fontStyle: $fontStyle,
        $textDecoration: $textDecoration,
        $textTransform: $textTransform,
        $bgColor: $bgColor,
        $border: $border
    );
}

/**
 * @mixin g6buttonStates()
 *
 * apply text color, background color, and border color to the hover, active, and disabled states of a button
 */
@mixin g6buttonStates($textColor, $bgColor, $bgHoverColor, $borderColor: $bgColor, $borderHoverColor: $bgHoverColor) {
    &:hover,
    &:focus,
    &:active,
    &.active {
        color: $textColor;
        background: $bgHoverColor;
        border-color: $borderHoverColor;
    }

    // Active state
    &.active,
    &:active {
    }

    // Disabled state
    &.disabled,
    &[disabled] {
        color: $textColor;
        background-color: $bgColor;
        border-color: $borderColor;
    }
}