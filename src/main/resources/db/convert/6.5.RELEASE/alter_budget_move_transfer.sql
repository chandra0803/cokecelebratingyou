--liquibase formatted sql

--changeset gorantla:1
--comment BUDGET_MOVE_PK_SQ sequence
--preconditions onFail:MARK_RAN onError:MARK_RAN
--precondition-sql-check expectedResult:0 select COUNT(1) from USER_SEQUENCES where SEQUENCE_NAME='BUDGET_MOVE_PK_SQ'
CREATE SEQUENCE BUDGET_MOVE_PK_SQ START WITH 100 INCREMENT BY 1;
--rollback DROP SEQUENCE BUDGET_MOVE_PK_SQ;

--changeset gorantla:2
--comment create budget move table
--preconditions onFail:MARK_RAN onError:MARK_RAN
--precondition-sql-check expectedResult:0 select COUNT(1) from USER_TABLES where TABLE_NAME='BUDGET_MOVE'
CREATE TABLE BUDGET_MOVE
(
  BUDGET_MOVE_ID          NUMBER(18)            NOT NULL,
  IMPORT_FILE_ID          NUMBER(18)            NOT NULL,
  IMPORT_RECORD_ID        NUMBER(18)            NOT NULL,
  RECORD_STATUS           VARCHAR2(10 CHAR),
  NODE_ID                 NUMBER(18),
  NODE_NAME               VARCHAR2(255 CHAR),
  OLD_PARENT_NODE_ID      NUMBER(18),
  NEW_PARENT_NODE_ID      NUMBER(18),
  NODE_OWN_USER_ID        NUMBER(18),
  OLD_PARENT_OWN_USER_ID  NUMBER(18),
  BUDGET_ID_LIST          VARCHAR2(1000 CHAR),
  IS_BUDGET_MOVE_NEEDED   NUMBER(1)             DEFAULT 0  NOT NULL,
  DATE_PROCESSED          DATE,
  DATE_CREATED            DATE                  NOT NULL,
  CREATED_BY              NUMBER(18)            NOT NULL
);
CREATE INDEX IDX_BUDGET_MOVE_FILE_ID ON BUDGET_MOVE (IMPORT_FILE_ID);
CREATE UNIQUE INDEX PK_BUDGET_MOVE ON BUDGET_MOVE (BUDGET_MOVE_ID);
CREATE UNIQUE INDEX UK_BUDGET_MOVE ON BUDGET_MOVE (IMPORT_RECORD_ID);
ALTER TABLE BUDGET_MOVE ADD (CONSTRAINT PK_BUDGET_MOVE PRIMARY KEY (BUDGET_MOVE_ID) USING INDEX PK_BUDGET_MOVE ENABLE VALIDATE,
                             CONSTRAINT UK_BUDGET_MOVE UNIQUE (IMPORT_RECORD_ID) USING INDEX UK_BUDGET_MOVE ENABLE VALIDATE);
--rollback DROP TABLE BUDGET_MOVE CASCADE CONSTRAINTS;

--changeset gorantla:3
--comment BUDGET_MOVE_EMAIL_PK_SQ sequence
--preconditions onFail:MARK_RAN onError:MARK_RAN
--precondition-sql-check expectedResult:0 select COUNT(1) from USER_SEQUENCES where SEQUENCE_NAME='BUDGET_MOVE_EMAIL_PK_SQ'
CREATE SEQUENCE BUDGET_MOVE_EMAIL_PK_SQ START WITH 100 INCREMENT BY 1;
--rollback DROP SEQUENCE BUDGET_MOVE_EMAIL_PK_SQ;

--changeset gorantla:4
--comment create budget move email table
--preconditions onFail:MARK_RAN onError:MARK_RAN
--precondition-sql-check expectedResult:0 select COUNT(1) from USER_TABLES where TABLE_NAME='BUDGET_MOVE_EMAIL'
CREATE TABLE BUDGET_MOVE_EMAIL
(
  BUDGET_MOVE_EMAIL_ID  NUMBER(18)              NOT NULL,
  FROM_NODE_ID          NUMBER(18)              NOT NULL,
  FROM_NODE_OWNER_ID    NUMBER(18),
  FROM_BUDGET_ID        NUMBER(18)              NOT NULL,
  TO_NODE_ID            NUMBER(18)              NOT NULL,
  TO_NODE_OWNER_ID      NUMBER(18),
  TO_BUDGET_ID          NUMBER(18)              NOT NULL,
  BUDGET_AMOUNT         NUMBER(18,4)            NOT NULL,
  BUDGET_TRANSFER_DATE  DATE                    NOT NULL,
  DATE_EMAIL_SENT       DATE,
  DATE_CREATED          DATE                    NOT NULL,
  CREATED_BY            NUMBER(18)              NOT NULL,
  DATE_MODIFIED         DATE,
  MODIFIED_BY           NUMBER(18)
);
CREATE UNIQUE INDEX PK_BUDGET_MOVE_EMAIL ON BUDGET_MOVE_EMAIL (BUDGET_MOVE_EMAIL_ID);
ALTER TABLE BUDGET_MOVE_EMAIL ADD (CONSTRAINT PK_BUDGET_MOVE_EMAIL PRIMARY KEY (BUDGET_MOVE_EMAIL_ID) USING INDEX PK_BUDGET_MOVE_EMAIL ENABLE VALIDATE);
ALTER TABLE BUDGET_MOVE_EMAIL ADD (CONSTRAINT FK_BUDGET_MOVE_EMAIL_1 FOREIGN KEY (FROM_NODE_ID) REFERENCES NODE (NODE_ID) ENABLE VALIDATE,
                                   CONSTRAINT FK_BUDGET_MOVE_EMAIL_2 FOREIGN KEY (FROM_NODE_OWNER_ID) REFERENCES APPLICATION_USER (USER_ID) ENABLE VALIDATE,
                                   CONSTRAINT FK_BUDGET_MOVE_EMAIL_3 FOREIGN KEY (FROM_BUDGET_ID) REFERENCES BUDGET (BUDGET_ID) ENABLE VALIDATE,
                                   CONSTRAINT FK_BUDGET_MOVE_EMAIL_4 FOREIGN KEY (TO_NODE_ID) REFERENCES NODE (NODE_ID) ENABLE VALIDATE,
								   CONSTRAINT FK_BUDGET_MOVE_EMAIL_5 FOREIGN KEY (TO_NODE_OWNER_ID) REFERENCES APPLICATION_USER (USER_ID) ENABLE VALIDATE,
								   CONSTRAINT FK_BUDGET_MOVE_EMAIL_6 FOREIGN KEY (TO_BUDGET_ID) REFERENCES BUDGET (BUDGET_ID) ENABLE VALIDATE);
--rollback DROP TABLE BUDGET_MOVE_EMAIL CASCADE CONSTRAINTS;

--changeset gorantla:5
--comment BUDGET_MOVE_ERROR_PK_SQ sequence
--preconditions onFail:MARK_RAN onError:MARK_RAN
--precondition-sql-check expectedResult:0 select COUNT(1) from USER_SEQUENCES where SEQUENCE_NAME='BUDGET_MOVE_ERROR_PK_SQ'
CREATE SEQUENCE BUDGET_MOVE_ERROR_PK_SQ START WITH 100 INCREMENT BY 1;
--rollback DROP SEQUENCE BUDGET_MOVE_ERROR_PK_SQ;

--changeset gorantla:6
--comment create BUDGET_MOVE_ERROR table
--preconditions onFail:MARK_RAN onError:MARK_RAN
--precondition-sql-check expectedResult:0 select COUNT(1) from USER_TABLES where TABLE_NAME='BUDGET_MOVE_ERROR'
CREATE TABLE BUDGET_MOVE_ERROR
(
  BUDGET_MOVE_ERROR_ID  NUMBER(18)              NOT NULL,
  IMPORT_FILE_ID        NUMBER(18)              NOT NULL,
  IMPORT_RECORD_ID      NUMBER(18)              NOT NULL,
  ERROR_MSG             VARCHAR2(4000 CHAR),
  DATE_CREATED          DATE                    NOT NULL,
  CREATED_BY            NUMBER(18)              NOT NULL
);
CREATE INDEX IDX_BUDGET_MOVE_ERROR1 ON BUDGET_MOVE_ERROR (IMPORT_FILE_ID);
CREATE INDEX IDX_BUDGET_MOVE_ERROR2 ON BUDGET_MOVE_ERROR (IMPORT_RECORD_ID);
CREATE UNIQUE INDEX PK_BUDGET_MOVE_ERROR ON BUDGET_MOVE_ERROR (BUDGET_MOVE_ERROR_ID);
ALTER TABLE BUDGET_MOVE_ERROR ADD (CONSTRAINT PK_BUDGET_MOVE_ERROR PRIMARY KEY (BUDGET_MOVE_ERROR_ID) USING INDEX PK_BUDGET_MOVE_ERROR ENABLE VALIDATE); 
--rollback DROP TABLE BUDGET_MOVE_ERROR CASCADE CONSTRAINTS;

--changeset gorantla:7
--comment create BUDGET_MOVE_HISTORY table
--preconditions onFail:MARK_RAN onError:MARK_RAN
--precondition-sql-check expectedResult:0 select COUNT(1) from USER_TABLES where TABLE_NAME='BUDGET_MOVE_HISTORY'
CREATE TABLE BUDGET_MOVE_HISTORY
(
  BUDGET_MOVE_ID          NUMBER(18)            NOT NULL,
  IMPORT_FILE_ID          NUMBER(18)            NOT NULL,
  IMPORT_RECORD_ID        NUMBER(18)            NOT NULL,
  RECORD_STATUS           VARCHAR2(10 CHAR),
  NODE_ID                 NUMBER(18),
  NODE_NAME               VARCHAR2(255 CHAR),
  OLD_PARENT_NODE_ID      NUMBER(18),
  NEW_PARENT_NODE_ID      NUMBER(18),
  NODE_OWN_USER_ID        NUMBER(18),
  OLD_PARENT_OWN_USER_ID  NUMBER(18),
  BUDGET_ID_LIST          VARCHAR2(1000 CHAR),
  IS_BUDGET_MOVE_NEEDED   NUMBER(1)             DEFAULT 0 NOT NULL,
  DATE_PROCESSED          DATE,
  DATE_CREATED            DATE                  NOT NULL,
  CREATED_BY              NUMBER(18)            NOT NULL,
  DATE_ADDED_TO_HIST      DATE
);
--rollback DROP TABLE BUDGET_MOVE_HISTORY CASCADE CONSTRAINTS;


--changeset gorantla:8
--comment added column REASON_CODE in BUDGET_HISTORY table
--preconditions onFail:MARK_RAN onError:MARK_RAN
--precondition-sql-check expectedResult:0 select COUNT(1) from USER_TAB_COLUMNS where TABLE_NAME='BUDGET_HISTORY' and COLUMN_NAME ='REASON_CODE'
ALTER TABLE BUDGET_HISTORY ADD (REASON_CODE  VARCHAR(10));
--rollback ALTER TABLE BUDGET_HISTORY DROP (REASON_CODE);

--changeset gorantla:9
--comment added column TO_BUDGET_ID in BUDGET_HISTORY table
--preconditions onFail:MARK_RAN onError:MARK_RAN
--precondition-sql-check expectedResult:0 select COUNT(1) from USER_TAB_COLUMNS where TABLE_NAME='BUDGET_HISTORY' and COLUMN_NAME ='TO_BUDGET_ID'
ALTER TABLE BUDGET_HISTORY ADD (TO_BUDGET_ID NUMBER(18,0));
--rollback ALTER TABLE BUDGET_HISTORY DROP (TO_BUDGET_ID);

--changeset gorantla:10
--comment added column TRANSFER_METHOD in BUDGET table
--preconditions onFail:MARK_RAN onError:MARK_RAN
--precondition-sql-check expectedResult:0 select COUNT(1) from USER_TAB_COLUMNS where TABLE_NAME='BUDGET' and COLUMN_NAME ='TRANSFER_METHOD'
ALTER TABLE BUDGET ADD TRANSFER_METHOD VARCHAR2(50);
--rollback ALTER TABLE BUDGET DROP (TRANSFER_METHOD);
