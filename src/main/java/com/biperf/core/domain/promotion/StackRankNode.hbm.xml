<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
    "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">

<hibernate-mapping>
  <class name="com.biperf.core.domain.promotion.StackRankNode" table="STACK_RANK_NODE">

    <id name="id" column="STACK_RANK_NODE_ID" type="java.lang.Long">
      <generator class="seqhilo">
        <param name="max_lo">0</param> <param name="sequence">STACK_RANK_NODE_PK_SQ</param>
      </generator>
    </id>

    <version name="version" column="VERSION" type="java.lang.Long" />

    <many-to-one name="stackRank" class="com.biperf.core.domain.promotion.StackRank" lazy="false">
      <column name="STACK_RANK_ID"/>
    </many-to-one>

    <many-to-one name="node" class="com.biperf.core.domain.hierarchy.Node" lazy="false">
      <column name="NODE_ID"/>
    </many-to-one>

    <set name="stackRankParticipants" table="STACK_RANK_PARTICIPANT" cascade="all-delete-orphan" inverse="true" lazy="true" order-by="RANK">
      <key column="STACK_RANK_NODE_ID"/>
      <one-to-many class="com.biperf.core.domain.promotion.StackRankParticipant"/>
    </set>

    <property name="auditCreateInfo" type="com.biperf.core.utils.hibernate.AuditCreateType">
      <column name="DATE_CREATED"/>
      <column name="CREATED_BY"/>
    </property>

    <property name="auditUpdateInfo" type="com.biperf.core.utils.hibernate.AuditUpdateType">
      <column name="DATE_MODIFIED"/>
      <column name="MODIFIED_BY"/>
    </property>

  </class>
  
  <query name="com.biperf.core.domain.promotion.selectStackRankNodeByStackRankIdAndNodeId">
    <![CDATA[      
        from StackRankNode stackRankNode
          where stackRankNode.stackRank.id = :stackRankId
          and   stackRankNode.node.id = :nodeId
    ]]>
  </query>  

  <query name="com.biperf.core.domain.promotion.selectStackRankNodeByStackRankIdNodeIdAndUserId">
    <![CDATA[
        from StackRankNode stackRankNode
        where stackRankNode.stackRank.id = :stackRankId
        and stackRankNode.node in (
          select userNode.node
          from UserNode userNode
            where userNode.user.id = :userId
            and userNode.node.id = :nodeId
          )
    ]]>
  </query>
</hibernate-mapping>