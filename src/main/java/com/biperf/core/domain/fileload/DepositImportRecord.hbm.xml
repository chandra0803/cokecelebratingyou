<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
    "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">

<hibernate-mapping>
  <class name="com.biperf.core.domain.fileload.DepositImportRecord" table="STAGE_DEPOSIT_IMPORT_RECORD">

    <!-- This is the surrogate primary key.  Make sure the column and sequence names are correct. -->
    <id name="id" type="java.lang.Long" column="IMPORT_RECORD_ID">
      <generator class="seqhilo">
        <param name="max_lo">0</param> <param name="sequence">IMPORT_RECORD_PK_SQ</param>
      </generator>
    </id>

    <!-- The create audit information is handled in the AuditCreateType and AuditInterceptor.  Column order here is important. -->
    <property name="auditCreateInfo" type="com.biperf.core.utils.hibernate.AuditCreateType">
      <column name="DATE_CREATED"/>
      <column name="CREATED_BY"/>
    </property>

    <property name="importFileId" type="java.lang.Long" column="IMPORT_FILE_ID"/>
    <property name="actionType" type="java.lang.String" column="ACTION_TYPE"/>
    <property name="userName" type="java.lang.String" column="USER_NAME"/>
    <property name="awardAmount" type="java.math.BigDecimal" column="AWARD_AMOUNT"/>
    <property name="awardDate" type="timestamp" column="AWARD_DATE" />
    <property name="comments" column="COMMENTS" type="java.lang.String" />
    <property name="anniversaryNumberOfDaysOrYears" type="java.lang.Integer" column="ANNIVERSARY_NUM"/>
    <property name="formElement1" column="FORM_ELEMENT_1" type="java.lang.String" />
    <property name="formElement2" column="FORM_ELEMENT_2" type="java.lang.String" />
    <property name="formElement3" column="FORM_ELEMENT_3" type="java.lang.String" />

    <set name="importRecordErrors" table="IMPORT_RECORD_ERROR" cascade="all-delete-orphan" inverse="true">
      <key column="IMPORT_RECORD_ID"/>
      <one-to-many class="com.biperf.core.domain.fileload.ImportRecordError"/>
    </set>

  </class>

  <query name="com.biperf.core.domain.import.file.DepositRecordsByPage">
    <![CDATA[
		from com.biperf.core.domain.fileload.DepositImportRecord depositRecord
	   where depositRecord.importFileId = :importFileId
    ]]>
  </query>
  
 	<sql-query name="com.biperf.core.domain.import.file.DepositRecordsWithoutMessage">
 		<return-scalar column="result" type="integer"/>
	    <![CDATA[
	      select d.import_record_id as result from STAGE_DEPOSIT_IMPORT_RECORD d
	      where d.import_file_id = :importFileId 
	      and NOT EXISTS(SELECT import_record_id
                     FROM IMPORT_RECORD_ERROR ire
                    WHERE ire.import_record_id = d.import_record_id
                      AND ire.import_file_id = d.import_file_id) AND d.comments IS NOT NULL
	      order by d.action_Type asc, d.USER_NAME asc, d.AWARD_AMOUNT asc
	    ]]>
	 </sql-query>
	 
	<sql-query name="com.biperf.core.domain.import.file.DepositRecordsByPageWithoutError">
	<return alias="d" class="com.biperf.core.domain.fileload.DepositImportRecord"/>
	    <![CDATA[
	      select {d.*}  from STAGE_DEPOSIT_IMPORT_RECORD d
	      where d.import_file_id = :importFileId 
	      and NOT EXISTS(SELECT import_record_id
                     FROM IMPORT_RECORD_ERROR ire
                    WHERE ire.import_record_id = d.import_record_id
                      AND ire.import_file_id = d.import_file_id)
	      order by d.action_Type asc, d.USER_NAME asc, d.AWARD_AMOUNT asc
	    ]]>
	 </sql-query>
	  
	<sql-query name="com.biperf.core.domain.import.file.DepositRecordsByPageWithError">
	<return alias="d" class="com.biperf.core.domain.fileload.DepositImportRecord"/>
	    <![CDATA[
	      select {d.*}  from STAGE_DEPOSIT_IMPORT_RECORD d
	      where d.import_file_id = :importFileId 
          and EXISTS(SELECT import_record_id
                     FROM IMPORT_RECORD_ERROR ire
                     WHERE ire.import_record_id = d.import_record_id
                     AND ire.import_file_id = d.import_file_id)
	      order by d.action_Type asc, d.USER_NAME asc, d.AWARD_AMOUNT asc
	    ]]>
	  </sql-query>
</hibernate-mapping>