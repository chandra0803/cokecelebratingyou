<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
    "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">

<hibernate-mapping>
  <class name="com.biperf.core.domain.fileload.PaxBaseImportRecord" table="STAGE_GQ_BASE_DATA_IMPORT">

    <!-- This is the surrogate primary key.  Make sure the column and sequence names are correct. 	-->
    <id name="id" type="java.lang.Long" column="IMPORT_RECORD_ID">
      <generator class="seqhilo">
        <param name="max_lo">0</param> <param name="sequence">IMPORT_RECORD_PK_SQ</param>
      </generator>
    </id>
	
    <!-- The create audit information is handled in the AuditCreateType and AuditInterceptor.  Column order here is important. -->
    <property name="auditCreateInfo" type="com.biperf.core.utils.hibernate.AuditCreateType">
      <column name="DATE_CREATED"/>
      <column name="CREATED_BY"/>
    </property>

    <property name="importFileId" type="java.lang.Long" column="IMPORT_FILE_ID"/>
    <property name="actionType" type="java.lang.String" column="ACTION_TYPE"/>
    
    <!-- userId -->
    <property name="userId" type="java.lang.Long" column="USER_ID"/>
    
    <!-- userName -->
    <property name="userName" type="java.lang.String" column="LOGIN_ID"/>
    
    <!-- firstName -->
    <property name="firstName" type="java.lang.String" column="FIRST_NAME"/>
    
    <!-- lastName -->
    <property name="lastName" type="java.lang.String" column="LAST_NAME"/>   
    
    <!-- emailAddr -->
    <property name="emailAddr" type="java.lang.String" column="EMAIL_ADDRESS"/>  
       		
	<!-- baseQuantity -->
	<property name="baseQuantity" type="java.math.BigDecimal" column="BASE_OBJECTIVE"/>

    <set name="importRecordErrors" table="IMPORT_RECORD_ERROR" cascade="all-delete-orphan" inverse="true">
      <key column="IMPORT_RECORD_ID"/>
      <one-to-many class="com.biperf.core.domain.fileload.ImportRecordError"/>
    </set>

  </class>

  <query name="com.biperf.core.domain.import.file.PaxBaseRecordsByPage">
    <![CDATA[
		from com.biperf.core.domain.fileload.PaxBaseImportRecord importRecord
	   where importRecord.importFileId = :importFileId 
    ]]>
  </query>
  
	<sql-query name="com.biperf.core.domain.import.file.PaxBaseRecordsByPageWithoutError">
	<return alias="pb" class="com.biperf.core.domain.fileload.PaxBaseImportRecord"/>
	    <![CDATA[
	      select {pb.*}  from STAGE_GQ_BASE_DATA_IMPORT pb
	      where pb.import_file_id = :importFileId 
	      and NOT EXISTS(SELECT import_record_id
                     FROM IMPORT_RECORD_ERROR ire
                    WHERE ire.import_record_id = pb.import_record_id
                      AND ire.import_file_id = pb.import_file_id)
	       order by pb.LOGIN_ID asc
	    ]]>
	 </sql-query>
	 
	<sql-query name="com.biperf.core.domain.import.file.PaxBaseRecordsByPageWithError">
	<return alias="pb" class="com.biperf.core.domain.fileload.PaxBaseImportRecord"/>
	    <![CDATA[
	      select {pb.*}  from STAGE_GQ_BASE_DATA_IMPORT pb
	      where pb.import_file_id = :importFileId 
          and EXISTS(SELECT import_record_id
                     FROM IMPORT_RECORD_ERROR ire
                    WHERE ire.import_record_id = pb.import_record_id
                      AND ire.import_file_id = pb.import_file_id)
	      order by pb.LOGIN_ID asc
	    ]]>
	  </sql-query>  
  
</hibernate-mapping>
