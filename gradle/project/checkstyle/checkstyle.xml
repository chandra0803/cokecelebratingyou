<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
          "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
          "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">

<!-- Checkstyle configuration that checks the BI style of coding Checkstyle 
	is very configurable. Be sure to read the documentation at checkstyle.sourceforgenet.com. 
	To completely disable a check, just comment it out or delete it from the 
	file. Authors: Ravi Kancherla -->

<module name="Checker">
	<property name="charset" value="UTF-8" />

	<property name="severity" value="error" />

	<!-- File extensions that are to be scanned -->
	<property name="fileExtensions" value="java, xml, properties" />

	<!-- Check to see if java files contain a tab character -->
	<module name="FileTabCharacter">
		<property name="fileExtensions" value="java" />
	</module>

	<module name="TreeWalker">

		<property name="tabWidth" value="4" />

		<!-- Outer File name matches with the class -->
		<module name="OuterTypeFilename" />

		<!-- Checks for Indentation -->
		<module name="Indentation">
			<property name="basicOffset" value="2" />
			<property name="braceAdjustment" value="0" />
			<property name="caseIndent" value="2" />
			<property name="throwsIndent" value="2" />
			<property name="arrayInitIndent" value="2" />
			<property name="lineWrappingIndentation" value="2" />
		</module>

		<!-- Checks for Left Curly braces -->
		<module name="LeftCurly">
			<property name="option" value="nl" />
		</module>

		<!-- Checks for Right Curly braces -->
		<module name="RightCurly">
			<property name="option" value="alone" />
		</module>

		<!-- Generic imports are not allowed -->
		<module name="AvoidStarImport" />

		<!-- Enforce java style -->
		<module name="ArrayTypeStyle" />

		<!-- Empty blocks for if, else etc are not allowed. Tokens are configured 
			for the type of blocks -->
		<module name="EmptyBlock">
			<property name="tokens" value="LITERAL_WHILE" />
			<property name="tokens" value="LITERAL_TRY" />
			<property name="tokens" value="LITERAL_FINALLY" />
			<property name="tokens" value="LITERAL_DO" />
			<property name="tokens" value="LITERAL_IF" />
			<property name="tokens" value="LITERAL_ELSE" />
			<property name="tokens" value="LITERAL_FOR" />
			<property name="tokens" value="INSTANCE_INIT" />
			<property name="tokens" value="STATIC_INIT" />
			<property name="tokens" value="LITERAL_SWITCH" />
			<property name="tokens" value="LITERAL_SYNCHRONIZED" />
			<property name="tokens" value="LITERAL_CASE" />
			<property name="tokens" value="LITERAL_DEFAULT" />
			<property name="tokens" value="ARRAY_INIT" />
		</module>

		<!-- Need braces for blocks -->
		<module name="NeedBraces" />

		<!-- Need space in parentheses -->
		<module name="ParenPad">
			<property name="option" value="space" />
		</module>

		<!-- Checks the padding between identifiers -->
		<module name="MethodParamPad">
			<property name="option" value="nospace" />
		</module>

		<!-- Checks for the use of unnecessary parentheses -->
		<module name="UnnecessaryParentheses" />

		<!-- Checks the policy on the padding of parentheses for typecasts -->
		<module name="TypecastParenPad" />

		<!-- More than 1 statements per line are not allowed -->
		<module name="OneStatementPerLine" />

		<!-- Default is required for a switch statement -->
		<module name="MissingSwitchDefault" />

		<!-- Switch case needs to have a break statement to avoid fall through -->
		<module name="FallThrough" />

		<!-- Check if default comes last for switch statements -->
		<module name="DefaultComesLast" />

		<!-- Restricts line wrapp for packages, imports and static imports -->
		<module name="NoLineWrap" />

		<!-- Checks if long constatns are defined with an upper ell -->
		<module name="UpperEll" />

		<!-- Detects empty statements, standalone semicolon -->
		<module name="EmptyStatement" />

		<!-- Checks if white space around generic tokens are as per convention -->
		<module name="GenericWhitespace" />

		<!-- Checks the policy on how to wrap lines on operators -->
		<module name="OperatorWrap" />

		<!-- Checks non white space characters are separated by no more than 1 
			whitespace -->
		<module name="SingleSpaceSeparator" />

		<!-- Checks that there is no whitespace before a token -->
		<module name="NoWhitespaceBefore" />

		<!-- Checks that a token is followed by whitespace. -->
		<module name="WhitespaceAfter">
			<property name="tokens" value="COMMA" />
			<property name="tokens" value="LITERAL_IF" />
			<property name="tokens" value="LITERAL_ELSE" />
			<property name="tokens" value="LITERAL_WHILE" />
			<property name="tokens" value="LITERAL_DO" />
			<property name="tokens" value="LITERAL_FOR" />
			<property name="tokens" value="DO_WHILE" />
		</module>

		<!-- Checks that a token is surrounded by whitespace -->
		<module name="WhitespaceAround">
			<property name="tokens" value="ASSIGN" />
			<property name="tokens" value="ARRAY_INIT" />
			<property name="tokens" value="BAND" />
			<property name="tokens" value="BAND_ASSIGN" />
			<property name="tokens" value="BOR" />
			<property name="tokens" value="BOR_ASSIGN" />
			<property name="tokens" value="BSR" />
			<property name="tokens" value="BSR_ASSIGN" />
			<property name="tokens" value="BXOR" />
			<property name="tokens" value="COLON" />
			<property name="tokens" value="DIV" />
			<property name="tokens" value="DIV_ASSIGN" />
			<property name="tokens" value="DO_WHILE" />
			<property name="tokens" value="EQUAL" />
			<property name="tokens" value="GE" />
			<property name="tokens" value="GT" />
			<property name="tokens" value="LAMBDA" />
			<property name="tokens" value="LAND" />
			<property name="tokens" value="LCURLY" />
			<property name="tokens" value="LE" />
			<property name="tokens" value="LITERAL_DO" />
			<property name="tokens" value="LITERAL_ELSE" />
			<property name="tokens" value="LITERAL_FINALLY" />
			<property name="tokens" value="LITERAL_FOR" />
			<property name="tokens" value="LITERAL_IF" />
			<property name="tokens" value="LITERAL_RETURN" />
			<property name="tokens" value="LITERAL_SWITCH" />
			<property name="tokens" value="LITERAL_SYNCHRONIZED" />
			<property name="tokens" value="LITERAL_TRY" />
			<property name="tokens" value="LITERAL_WHILE" />
			<property name="tokens" value="LOR" />
			<property name="tokens" value="LT" />
			<property name="tokens" value="MINUS" />
			<property name="tokens" value="MINUS_ASSIGN" />
			<property name="tokens" value="MOD" />
			<property name="tokens" value="MOD_ASSIGN" />
			<property name="tokens" value="NOT_EQUAL" />
			<property name="tokens" value="PLUS" />
			<property name="tokens" value="PLUS_ASSIGN" />
			<property name="tokens" value="QUESTION" />
			<property name="tokens" value="RCURLY" />
			<property name="tokens" value="SL" />
			<property name="tokens" value="SLIST" />
			<property name="tokens" value="SL_ASSIGN" />
			<property name="tokens" value="SR" />
			<property name="tokens" value="SR_ASSIGN" />
			<property name="tokens" value="STAR" />
			<property name="tokens" value="STAR_ASSIGN" />
			<property name="tokens" value="LITERAL_ASSERT" />
			<property name="tokens" value="TYPE_EXTENSION_AND" />
		</module>

		<!-- Checks for empty line separators for tokens -->
		<module name="EmptyLineSeparator">
			<property name="tokens" value="PACKAGE_DEF" />
			<property name="tokens" value="IMPORT" />
			<property name="tokens" value="CLASS_DEF" />
			<property name="tokens" value="INTERFACE_DEF" />
			<property name="tokens" value="ENUM_DEF" />
			<property name="tokens" value="STATIC_INIT" />
			<property name="tokens" value="INSTANCE_INIT" />
			<property name="tokens" value="METHOD_DEF" />
			<property name="tokens" value="CTOR_DEF" />
		</module>

		<!-- Checks the padding of an empty for initializer; that is whether white 
			space is required at an empty for initializer, or such white space is forbidden -->
		<module name="EmptyForInitializerPad">
			<property name="option" value="space" />
		</module>

		<!-- Checks for any Non ASCII characters -->
		<module name="AvoidEscapedUnicodeCharacters">
			<property name="allowIfAllCharactersEscaped" value="true" />
		</module>

		<!-- Import order according to BI format -->
		<module name="ImportOrder">
			<property name="option" value="top" />
			<property name="groups" value="java,javax,org,com" />
			<property name="ordered" value="true" />
			<property name="separated" value="true" />
			<property name="sortStaticImportsAlphabetically" value="true" />
		</module>

		<!-- Checks for unused imports -->
		<module name="UnusedImports" />

		<!-- Checks that references to instance variables dont rely on default 
			behavior when this. is absent -->
		<module name="RequireThis" />

		<!-- Checks for valid identifiers for packages. Default is ^[a-z]+(\.[a-z][a-z0-9]*)*$ -->
		<module name="PackageName" />

		<!-- Checks for simplication of boolean expression -->
		<module name="SimplifyBooleanExpression" />

		<!-- Checks for over complicated boolean return -->
		<module name="SimplifyBooleanReturn" />

		<!-- Checks that string literals are not used with == or != -->
		<module name="StringLiteralEquality" />
		
		<!-- Ignores formatting check if tags are on/off -->
		<module name="SuppressionCommentFilter" />

	</module>

	<!-- Disallow odd control and punctuation characters used by Microsoft Word -->
	<module name="RegexpSingleline">
		<property name="format" value="[\x{80}-\x{AF}\x{2000}-\x{2069}]" />
	</module>	


</module>
