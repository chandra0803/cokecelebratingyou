buildscript {
  repositories {
    maven {
		url 'https://maven.biw-services.com/artifactory/gts-repo'
		credentials {
			username = System.env.mavenUsername
			password = System.env.mavenPassword
    		}
		}
    dependencies {
      classpath "dom4j:dom4j:${dom4jVersion}"
      classpath "jaxen:jaxen:${jaxenVersion}"
    }
  }
}


import java.io.File
import java.io.FileOutputStream
import java.io.IOException
import java.io.OutputStream
import java.util.Iterator
import java.util.List

import org.dom4j.Attribute
import org.dom4j.Document
import org.dom4j.DocumentException
import org.dom4j.Element
import org.dom4j.Node
import org.dom4j.io.OutputFormat
import org.dom4j.io.SAXReader
import org.dom4j.io.XMLWriter

public static Document readDom( Reader inputReader ) {
  SAXReader reader = new SAXReader();
  return reader.read( inputReader );
}

public static void writeDom( Document doc, Writer outputWriter ) {
  OutputStream output = null;
  XMLWriter writer = null;
  OutputFormat format = OutputFormat.createPrettyPrint();
  writer = new XMLWriter( outputWriter, format );
  writer.write( doc );
}

public static void removeNodes( Document cmData, String nodeName ) {
  List nodes = cmData.selectNodes( nodeName );
  for ( Iterator iter = nodes.iterator(); iter.hasNext(); ) {
    Element node = (Element)iter.next();
    node.getParent().remove( node );
  }
}

public static void removeNodesOrphan( Document cmData, String nodeName, String childNodeName ) {
  List sections = cmData.selectNodes( nodeName );
  for ( Iterator iter = sections.iterator(); iter.hasNext(); ) {
    Element node = (Element)iter.next();
    Node child = node.selectSingleNode( childNodeName );
    if ( child == null ) {
      node.getParent().remove( node );
    }
  }
}

public static void addAttribute( Document cmData, String nodeName, String attributeName, String value ) {
  List nodes = cmData.selectNodes( nodeName );
  for ( Iterator iter = nodes.iterator(); iter.hasNext(); ) {
    Element node = (Element)iter.next();
    Attribute nodeAttribute = node.attribute( attributeName );
    if ( null != nodeAttribute ) {
      nodeAttribute.setValue( value );
    }
    else {
      node.addAttribute( attributeName, value );
    }
  }
}

public static void updateAttribute( Document cmData, String nodeName, String attributeName, String value ) {
  List nodes = cmData.selectNodes( nodeName );
  for ( Iterator iter = nodes.iterator(); iter.hasNext(); ) {
    Element node = (Element)iter.next();
    Attribute attribute = node.attribute( attributeName );
    if ( null != attribute ) {
      attribute.setValue( value );
    }
  }
}

// Add references to new methods here. This makes them available to other .gradle files.
ext {
  readDom = this.&readDom
  writeDom = this.&writeDom
  removeNodes = this.&removeNodes
  removeNodesOrphan = this.&removeNodesOrphan
  addAttribute = this.&addAttribute
  updateAttribute = this.&updateAttribute
}
